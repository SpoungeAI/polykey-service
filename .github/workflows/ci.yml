name: PolyKey CI (Go Build, Test, & Docker)

on:
  push:
    branches: [ "main", "ci" ]
  pull_request:
    branches: [ "main", "ci" ]

env:
  GO_VERSION: '1.24.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ----------------------------------------------------------------------------
  # Job 1: Lint Go Code
  # ----------------------------------------------------------------------------
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.2.2

  # ----------------------------------------------------------------------------
  # Job 2: Run Unit Tests
  # ----------------------------------------------------------------------------
  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: make install-deps

      - name: Run Unit Tests with Race Detector
        run: make test-race

  # ----------------------------------------------------------------------------
  # Job 3: Run Integration Tests
  # Runs only on pull requests, after unit tests succeed.
  # ----------------------------------------------------------------------------
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: make install-deps

      - name: Run Integration Tests
        run: make test-integration

  # ----------------------------------------------------------------------------
  # Job 4: Build, Scan, and Push Docker Image
  # Runs on pull requests (build & scan) and pushes to main (build, scan, & push).
  # ----------------------------------------------------------------------------
  build-scan-push:
    name: Build, Scan & Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=,format=short
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=pr
            type=ref,event=branch

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate SBOM
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [lint, unit-test, integration-test, build-scan-push]
    if: always()
    steps:
      - name: Check job status
        run: |
          if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.unit-test.result }}" == "failure" || "${{ needs.integration-test.result }}" == "failure" || "${{ needs.build-scan-push.result }}" == "failure" ]]; then
            echo "One or more jobs failed"
            exit 1
          fi