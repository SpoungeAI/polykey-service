# FILE: .github/workflows/ci.yml
#
# Main CI pipeline: Runs on every push and pull request to main/ci.
# - Runs unit tests.
# - Runs integration tests on pull requests.
# - Builds and scans a Docker image on pull requests.
# - Builds, scans, and pushes a Docker image on pushes to main.

name: PolyKey CI (Go Build, Test, & Docker)

on:
  push:
    branches: [ "main", "ci" ]
  pull_request:
    branches: [ "main", "ci" ]

jobs:
  # ----------------------------------------------------------------------------
  # Job 1: Lint Go Code (Temporarily Disabled)
  # ----------------------------------------------------------------------------
  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: '1.24.1'
  #         cache: true
  #
  #     - name: Install tparse
  #       run: go install github.com/mfridman/tparse@latest
  #
  #     - name: Run golangci-lint
  #       uses: golangci/golangci-lint-action@v7
  #       with:
  #         version: v2.2.2

  # ----------------------------------------------------------------------------
  # Job 2: Run Unit Tests
  # ----------------------------------------------------------------------------
  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'
          cache: true

      - name: Download dependencies
        run: go mod tidy
        
      - name: Install tparse
        run: go install github.com/mfridman/tparse@latest

      - name: Run Unit Tests with Race Detector
        run: make test-race 

  # ----------------------------------------------------------------------------
  # Job 3: Run Integration Tests
  # Runs only on pull requests, after unit tests succeed.
  # ----------------------------------------------------------------------------
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-test]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1' 
          cache: true

      - name: Download dependencies
        run: go mod tidy
        
      - name: Install tparse
        run: go install github.com/mfridman/tparse@latest

      - name: Run Integration Tests
        # Pipe output to tparse for a clean, readable summary
        run: make test-integration  

  # ----------------------------------------------------------------------------
  # Job 4: Build, Scan, and Push Docker Image
  # Runs on pull requests (build & scan) and pushes to main (build, scan, & push).
  # ----------------------------------------------------------------------------
  build-scan-push:
    name: Build, Scan & Push Docker Image
    runs-on: ubuntu-latest
    needs: [unit-test]
    permissions:
      contents: read
      packages: write 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,prefix=,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/image.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          input: /tmp/image.tar
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push Docker image to GHCR
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker load --input /tmp/image.tar
          docker push --all-tags ghcr.io/${{ github.repository }}
