// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: polykey.proto

package polykey

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PolyKeyClient is the client API for PolyKey service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolyKeyClient interface {
	// Receives a chat prompt and streams back the LLM's response in real-time.
	RouteChat(ctx context.Context, in *RouteChatRequest, opts ...grpc.CallOption) (PolyKey_RouteChatClient, error)
	// Creates a new bot configuration for the authenticated user.
	CreateBot(ctx context.Context, in *CreateBotRequest, opts ...grpc.CallOption) (*Bot, error)
	// Retrieves a specific bot's configuration.
	GetBot(ctx context.Context, in *GetBotRequest, opts ...grpc.CallOption) (*Bot, error)
	// Updates an existing bot's mutable configuration details.
	UpdateBot(ctx context.Context, in *UpdateBotRequest, opts ...grpc.CallOption) (*Bot, error)
	// Deletes a bot and its associated data.
	DeleteBot(ctx context.Context, in *DeleteBotRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Lists all bots belonging to the authenticated user.
	ListBots(ctx context.Context, in *ListBotsRequest, opts ...grpc.CallOption) (PolyKey_ListBotsClient, error)
	// Securely sets or updates a bot's third-party API key.
	SetBotAPIKey(ctx context.Context, in *SetBotAPIKeyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type polyKeyClient struct {
	cc grpc.ClientConnInterface
}

func NewPolyKeyClient(cc grpc.ClientConnInterface) PolyKeyClient {
	return &polyKeyClient{cc}
}

func (c *polyKeyClient) RouteChat(ctx context.Context, in *RouteChatRequest, opts ...grpc.CallOption) (PolyKey_RouteChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &PolyKey_ServiceDesc.Streams[0], "/polykey.PolyKey/RouteChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &polyKeyRouteChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PolyKey_RouteChatClient interface {
	Recv() (*RouteChatResponse, error)
	grpc.ClientStream
}

type polyKeyRouteChatClient struct {
	grpc.ClientStream
}

func (x *polyKeyRouteChatClient) Recv() (*RouteChatResponse, error) {
	m := new(RouteChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *polyKeyClient) CreateBot(ctx context.Context, in *CreateBotRequest, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/polykey.PolyKey/CreateBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polyKeyClient) GetBot(ctx context.Context, in *GetBotRequest, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/polykey.PolyKey/GetBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polyKeyClient) UpdateBot(ctx context.Context, in *UpdateBotRequest, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/polykey.PolyKey/UpdateBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polyKeyClient) DeleteBot(ctx context.Context, in *DeleteBotRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/polykey.PolyKey/DeleteBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polyKeyClient) ListBots(ctx context.Context, in *ListBotsRequest, opts ...grpc.CallOption) (PolyKey_ListBotsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PolyKey_ServiceDesc.Streams[1], "/polykey.PolyKey/ListBots", opts...)
	if err != nil {
		return nil, err
	}
	x := &polyKeyListBotsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PolyKey_ListBotsClient interface {
	Recv() (*Bot, error)
	grpc.ClientStream
}

type polyKeyListBotsClient struct {
	grpc.ClientStream
}

func (x *polyKeyListBotsClient) Recv() (*Bot, error) {
	m := new(Bot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *polyKeyClient) SetBotAPIKey(ctx context.Context, in *SetBotAPIKeyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/polykey.PolyKey/SetBotAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolyKeyServer is the server API for PolyKey service.
// All implementations must embed UnimplementedPolyKeyServer
// for forward compatibility
type PolyKeyServer interface {
	// Receives a chat prompt and streams back the LLM's response in real-time.
	RouteChat(*RouteChatRequest, PolyKey_RouteChatServer) error
	// Creates a new bot configuration for the authenticated user.
	CreateBot(context.Context, *CreateBotRequest) (*Bot, error)
	// Retrieves a specific bot's configuration.
	GetBot(context.Context, *GetBotRequest) (*Bot, error)
	// Updates an existing bot's mutable configuration details.
	UpdateBot(context.Context, *UpdateBotRequest) (*Bot, error)
	// Deletes a bot and its associated data.
	DeleteBot(context.Context, *DeleteBotRequest) (*empty.Empty, error)
	// Lists all bots belonging to the authenticated user.
	ListBots(*ListBotsRequest, PolyKey_ListBotsServer) error
	// Securely sets or updates a bot's third-party API key.
	SetBotAPIKey(context.Context, *SetBotAPIKeyRequest) (*empty.Empty, error)
	mustEmbedUnimplementedPolyKeyServer()
}

// UnimplementedPolyKeyServer must be embedded to have forward compatible implementations.
type UnimplementedPolyKeyServer struct {
}

func (UnimplementedPolyKeyServer) RouteChat(*RouteChatRequest, PolyKey_RouteChatServer) error {
	return status.Errorf(codes.Unimplemented, "method RouteChat not implemented")
}
func (UnimplementedPolyKeyServer) CreateBot(context.Context, *CreateBotRequest) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBot not implemented")
}
func (UnimplementedPolyKeyServer) GetBot(context.Context, *GetBotRequest) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBot not implemented")
}
func (UnimplementedPolyKeyServer) UpdateBot(context.Context, *UpdateBotRequest) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBot not implemented")
}
func (UnimplementedPolyKeyServer) DeleteBot(context.Context, *DeleteBotRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBot not implemented")
}
func (UnimplementedPolyKeyServer) ListBots(*ListBotsRequest, PolyKey_ListBotsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBots not implemented")
}
func (UnimplementedPolyKeyServer) SetBotAPIKey(context.Context, *SetBotAPIKeyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBotAPIKey not implemented")
}
func (UnimplementedPolyKeyServer) mustEmbedUnimplementedPolyKeyServer() {}

// UnsafePolyKeyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolyKeyServer will
// result in compilation errors.
type UnsafePolyKeyServer interface {
	mustEmbedUnimplementedPolyKeyServer()
}

func RegisterPolyKeyServer(s grpc.ServiceRegistrar, srv PolyKeyServer) {
	s.RegisterService(&PolyKey_ServiceDesc, srv)
}

func _PolyKey_RouteChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RouteChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PolyKeyServer).RouteChat(m, &polyKeyRouteChatServer{stream})
}

type PolyKey_RouteChatServer interface {
	Send(*RouteChatResponse) error
	grpc.ServerStream
}

type polyKeyRouteChatServer struct {
	grpc.ServerStream
}

func (x *polyKeyRouteChatServer) Send(m *RouteChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PolyKey_CreateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolyKeyServer).CreateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/polykey.PolyKey/CreateBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolyKeyServer).CreateBot(ctx, req.(*CreateBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolyKey_GetBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolyKeyServer).GetBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/polykey.PolyKey/GetBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolyKeyServer).GetBot(ctx, req.(*GetBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolyKey_UpdateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolyKeyServer).UpdateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/polykey.PolyKey/UpdateBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolyKeyServer).UpdateBot(ctx, req.(*UpdateBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolyKey_DeleteBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolyKeyServer).DeleteBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/polykey.PolyKey/DeleteBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolyKeyServer).DeleteBot(ctx, req.(*DeleteBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolyKey_ListBots_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListBotsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PolyKeyServer).ListBots(m, &polyKeyListBotsServer{stream})
}

type PolyKey_ListBotsServer interface {
	Send(*Bot) error
	grpc.ServerStream
}

type polyKeyListBotsServer struct {
	grpc.ServerStream
}

func (x *polyKeyListBotsServer) Send(m *Bot) error {
	return x.ServerStream.SendMsg(m)
}

func _PolyKey_SetBotAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBotAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolyKeyServer).SetBotAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/polykey.PolyKey/SetBotAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolyKeyServer).SetBotAPIKey(ctx, req.(*SetBotAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PolyKey_ServiceDesc is the grpc.ServiceDesc for PolyKey service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolyKey_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "polykey.PolyKey",
	HandlerType: (*PolyKeyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBot",
			Handler:    _PolyKey_CreateBot_Handler,
		},
		{
			MethodName: "GetBot",
			Handler:    _PolyKey_GetBot_Handler,
		},
		{
			MethodName: "UpdateBot",
			Handler:    _PolyKey_UpdateBot_Handler,
		},
		{
			MethodName: "DeleteBot",
			Handler:    _PolyKey_DeleteBot_Handler,
		},
		{
			MethodName: "SetBotAPIKey",
			Handler:    _PolyKey_SetBotAPIKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RouteChat",
			Handler:       _PolyKey_RouteChat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListBots",
			Handler:       _PolyKey_ListBots_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "polykey.proto",
}
