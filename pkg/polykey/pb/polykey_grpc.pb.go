// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: polykey.proto

package polykey

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PolyKey_RouteChat_FullMethodName    = "/polykey.PolyKey/RouteChat"
	PolyKey_CreateBot_FullMethodName    = "/polykey.PolyKey/CreateBot"
	PolyKey_GetBot_FullMethodName       = "/polykey.PolyKey/GetBot"
	PolyKey_UpdateBot_FullMethodName    = "/polykey.PolyKey/UpdateBot"
	PolyKey_DeleteBot_FullMethodName    = "/polykey.PolyKey/DeleteBot"
	PolyKey_ListBots_FullMethodName     = "/polykey.PolyKey/ListBots"
	PolyKey_SetBotAPIKey_FullMethodName = "/polykey.PolyKey/SetBotAPIKey"
)

// PolyKeyClient is the client API for PolyKey service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PolyKey is the core service for the Spounge platform. It handles
// all specialized LLM logic and bot configuration management.
type PolyKeyClient interface {
	// Receives a chat prompt and streams back the LLM's response in real-time.
	RouteChat(ctx context.Context, in *RouteChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RouteChatResponse], error)
	// Creates a new bot configuration for the authenticated user.
	CreateBot(ctx context.Context, in *CreateBotRequest, opts ...grpc.CallOption) (*Bot, error)
	// Retrieves a specific bot's configuration.
	GetBot(ctx context.Context, in *GetBotRequest, opts ...grpc.CallOption) (*Bot, error)
	// Updates an existing bot's mutable configuration details.
	UpdateBot(ctx context.Context, in *UpdateBotRequest, opts ...grpc.CallOption) (*Bot, error)
	// Deletes a bot and its associated data.
	DeleteBot(ctx context.Context, in *DeleteBotRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Lists all bots belonging to the authenticated user.
	ListBots(ctx context.Context, in *ListBotsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Bot], error)
	// Securely sets or updates a bot's third-party API key.
	SetBotAPIKey(ctx context.Context, in *SetBotAPIKeyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type polyKeyClient struct {
	cc grpc.ClientConnInterface
}

func NewPolyKeyClient(cc grpc.ClientConnInterface) PolyKeyClient {
	return &polyKeyClient{cc}
}

func (c *polyKeyClient) RouteChat(ctx context.Context, in *RouteChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RouteChatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PolyKey_ServiceDesc.Streams[0], PolyKey_RouteChat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RouteChatRequest, RouteChatResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PolyKey_RouteChatClient = grpc.ServerStreamingClient[RouteChatResponse]

func (c *polyKeyClient) CreateBot(ctx context.Context, in *CreateBotRequest, opts ...grpc.CallOption) (*Bot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bot)
	err := c.cc.Invoke(ctx, PolyKey_CreateBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polyKeyClient) GetBot(ctx context.Context, in *GetBotRequest, opts ...grpc.CallOption) (*Bot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bot)
	err := c.cc.Invoke(ctx, PolyKey_GetBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polyKeyClient) UpdateBot(ctx context.Context, in *UpdateBotRequest, opts ...grpc.CallOption) (*Bot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bot)
	err := c.cc.Invoke(ctx, PolyKey_UpdateBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polyKeyClient) DeleteBot(ctx context.Context, in *DeleteBotRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, PolyKey_DeleteBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polyKeyClient) ListBots(ctx context.Context, in *ListBotsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Bot], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PolyKey_ServiceDesc.Streams[1], PolyKey_ListBots_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListBotsRequest, Bot]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PolyKey_ListBotsClient = grpc.ServerStreamingClient[Bot]

func (c *polyKeyClient) SetBotAPIKey(ctx context.Context, in *SetBotAPIKeyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, PolyKey_SetBotAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolyKeyServer is the server API for PolyKey service.
// All implementations must embed UnimplementedPolyKeyServer
// for forward compatibility.
//
// PolyKey is the core service for the Spounge platform. It handles
// all specialized LLM logic and bot configuration management.
type PolyKeyServer interface {
	// Receives a chat prompt and streams back the LLM's response in real-time.
	RouteChat(*RouteChatRequest, grpc.ServerStreamingServer[RouteChatResponse]) error
	// Creates a new bot configuration for the authenticated user.
	CreateBot(context.Context, *CreateBotRequest) (*Bot, error)
	// Retrieves a specific bot's configuration.
	GetBot(context.Context, *GetBotRequest) (*Bot, error)
	// Updates an existing bot's mutable configuration details.
	UpdateBot(context.Context, *UpdateBotRequest) (*Bot, error)
	// Deletes a bot and its associated data.
	DeleteBot(context.Context, *DeleteBotRequest) (*empty.Empty, error)
	// Lists all bots belonging to the authenticated user.
	ListBots(*ListBotsRequest, grpc.ServerStreamingServer[Bot]) error
	// Securely sets or updates a bot's third-party API key.
	SetBotAPIKey(context.Context, *SetBotAPIKeyRequest) (*empty.Empty, error)
	mustEmbedUnimplementedPolyKeyServer()
}

// UnimplementedPolyKeyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPolyKeyServer struct{}

func (UnimplementedPolyKeyServer) RouteChat(*RouteChatRequest, grpc.ServerStreamingServer[RouteChatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RouteChat not implemented")
}
func (UnimplementedPolyKeyServer) CreateBot(context.Context, *CreateBotRequest) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBot not implemented")
}
func (UnimplementedPolyKeyServer) GetBot(context.Context, *GetBotRequest) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBot not implemented")
}
func (UnimplementedPolyKeyServer) UpdateBot(context.Context, *UpdateBotRequest) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBot not implemented")
}
func (UnimplementedPolyKeyServer) DeleteBot(context.Context, *DeleteBotRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBot not implemented")
}
func (UnimplementedPolyKeyServer) ListBots(*ListBotsRequest, grpc.ServerStreamingServer[Bot]) error {
	return status.Errorf(codes.Unimplemented, "method ListBots not implemented")
}
func (UnimplementedPolyKeyServer) SetBotAPIKey(context.Context, *SetBotAPIKeyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBotAPIKey not implemented")
}
func (UnimplementedPolyKeyServer) mustEmbedUnimplementedPolyKeyServer() {}
func (UnimplementedPolyKeyServer) testEmbeddedByValue()                 {}

// UnsafePolyKeyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolyKeyServer will
// result in compilation errors.
type UnsafePolyKeyServer interface {
	mustEmbedUnimplementedPolyKeyServer()
}

func RegisterPolyKeyServer(s grpc.ServiceRegistrar, srv PolyKeyServer) {
	// If the following call pancis, it indicates UnimplementedPolyKeyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PolyKey_ServiceDesc, srv)
}

func _PolyKey_RouteChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RouteChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PolyKeyServer).RouteChat(m, &grpc.GenericServerStream[RouteChatRequest, RouteChatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PolyKey_RouteChatServer = grpc.ServerStreamingServer[RouteChatResponse]

func _PolyKey_CreateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolyKeyServer).CreateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolyKey_CreateBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolyKeyServer).CreateBot(ctx, req.(*CreateBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolyKey_GetBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolyKeyServer).GetBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolyKey_GetBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolyKeyServer).GetBot(ctx, req.(*GetBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolyKey_UpdateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolyKeyServer).UpdateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolyKey_UpdateBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolyKeyServer).UpdateBot(ctx, req.(*UpdateBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolyKey_DeleteBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolyKeyServer).DeleteBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolyKey_DeleteBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolyKeyServer).DeleteBot(ctx, req.(*DeleteBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolyKey_ListBots_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListBotsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PolyKeyServer).ListBots(m, &grpc.GenericServerStream[ListBotsRequest, Bot]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PolyKey_ListBotsServer = grpc.ServerStreamingServer[Bot]

func _PolyKey_SetBotAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBotAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolyKeyServer).SetBotAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolyKey_SetBotAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolyKeyServer).SetBotAPIKey(ctx, req.(*SetBotAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PolyKey_ServiceDesc is the grpc.ServiceDesc for PolyKey service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolyKey_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "polykey.PolyKey",
	HandlerType: (*PolyKeyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBot",
			Handler:    _PolyKey_CreateBot_Handler,
		},
		{
			MethodName: "GetBot",
			Handler:    _PolyKey_GetBot_Handler,
		},
		{
			MethodName: "UpdateBot",
			Handler:    _PolyKey_UpdateBot_Handler,
		},
		{
			MethodName: "DeleteBot",
			Handler:    _PolyKey_DeleteBot_Handler,
		},
		{
			MethodName: "SetBotAPIKey",
			Handler:    _PolyKey_SetBotAPIKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RouteChat",
			Handler:       _PolyKey_RouteChat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListBots",
			Handler:       _PolyKey_ListBots_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "polykey.proto",
}
