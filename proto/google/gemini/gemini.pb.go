// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: gemini.proto

package gemini

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Text prompt message
type TextPrompt struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextPrompt) Reset() {
	*x = TextPrompt{}
	mi := &file_gemini_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextPrompt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextPrompt) ProtoMessage() {}

func (x *TextPrompt) ProtoReflect() protoreflect.Message {
	mi := &file_gemini_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextPrompt.ProtoReflect.Descriptor instead.
func (*TextPrompt) Descriptor() ([]byte, []int) {
	return file_gemini_proto_rawDescGZIP(), []int{0}
}

func (x *TextPrompt) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// GenerateTextRequest matches the Google Gemini Text Generation API
type GenerateTextRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Model           string                 `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`                                               // Model name, e.g., "gemini-1"
	Prompt          *TextPrompt            `protobuf:"bytes,2,opt,name=prompt,proto3" json:"prompt,omitempty"`                                             // Input prompt
	Temperature     float32                `protobuf:"fixed32,3,opt,name=temperature,proto3" json:"temperature,omitempty"`                                 // Sampling temperature
	MaxOutputTokens int32                  `protobuf:"varint,4,opt,name=max_output_tokens,json=maxOutputTokens,proto3" json:"max_output_tokens,omitempty"` // Maximum tokens to generate
	TopP            int32                  `protobuf:"varint,5,opt,name=top_p,json=topP,proto3" json:"top_p,omitempty"`                                    // Nucleus sampling parameter
	TopK            int32                  `protobuf:"varint,6,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`                                    // Top-k sampling parameter
	StopSequences   bool                   `protobuf:"varint,7,opt,name=stop_sequences,json=stopSequences,proto3" json:"stop_sequences,omitempty"`         // To specify stopping conditions (simplified)
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GenerateTextRequest) Reset() {
	*x = GenerateTextRequest{}
	mi := &file_gemini_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTextRequest) ProtoMessage() {}

func (x *GenerateTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gemini_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTextRequest.ProtoReflect.Descriptor instead.
func (*GenerateTextRequest) Descriptor() ([]byte, []int) {
	return file_gemini_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateTextRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *GenerateTextRequest) GetPrompt() *TextPrompt {
	if x != nil {
		return x.Prompt
	}
	return nil
}

func (x *GenerateTextRequest) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *GenerateTextRequest) GetMaxOutputTokens() int32 {
	if x != nil {
		return x.MaxOutputTokens
	}
	return 0
}

func (x *GenerateTextRequest) GetTopP() int32 {
	if x != nil {
		return x.TopP
	}
	return 0
}

func (x *GenerateTextRequest) GetTopK() int32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *GenerateTextRequest) GetStopSequences() bool {
	if x != nil {
		return x.StopSequences
	}
	return false
}

// Text generation candidate
type TextCandidate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Output        string                 `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`                            // Generated text
	TokenCount    int32                  `protobuf:"varint,2,opt,name=token_count,json=tokenCount,proto3" json:"token_count,omitempty"` // Number of tokens generated
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextCandidate) Reset() {
	*x = TextCandidate{}
	mi := &file_gemini_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextCandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextCandidate) ProtoMessage() {}

func (x *TextCandidate) ProtoReflect() protoreflect.Message {
	mi := &file_gemini_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextCandidate.ProtoReflect.Descriptor instead.
func (*TextCandidate) Descriptor() ([]byte, []int) {
	return file_gemini_proto_rawDescGZIP(), []int{2}
}

func (x *TextCandidate) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *TextCandidate) GetTokenCount() int32 {
	if x != nil {
		return x.TokenCount
	}
	return 0
}

// GenerateTextResponse matches the API's response structure
type GenerateTextResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Candidates           []*TextCandidate       `protobuf:"bytes,1,rep,name=candidates,proto3" json:"candidates,omitempty"`                                                    // One or more generation candidates
	PromptTokenUsage     int32                  `protobuf:"varint,2,opt,name=prompt_token_usage,json=promptTokenUsage,proto3" json:"prompt_token_usage,omitempty"`             // Tokens consumed by prompt
	CompletionTokenUsage int32                  `protobuf:"varint,3,opt,name=completion_token_usage,json=completionTokenUsage,proto3" json:"completion_token_usage,omitempty"` // Tokens generated
	TotalTokenUsage      int32                  `protobuf:"varint,4,opt,name=total_token_usage,json=totalTokenUsage,proto3" json:"total_token_usage,omitempty"`                // Total tokens used
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GenerateTextResponse) Reset() {
	*x = GenerateTextResponse{}
	mi := &file_gemini_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTextResponse) ProtoMessage() {}

func (x *GenerateTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gemini_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTextResponse.ProtoReflect.Descriptor instead.
func (*GenerateTextResponse) Descriptor() ([]byte, []int) {
	return file_gemini_proto_rawDescGZIP(), []int{3}
}

func (x *GenerateTextResponse) GetCandidates() []*TextCandidate {
	if x != nil {
		return x.Candidates
	}
	return nil
}

func (x *GenerateTextResponse) GetPromptTokenUsage() int32 {
	if x != nil {
		return x.PromptTokenUsage
	}
	return 0
}

func (x *GenerateTextResponse) GetCompletionTokenUsage() int32 {
	if x != nil {
		return x.CompletionTokenUsage
	}
	return 0
}

func (x *GenerateTextResponse) GetTotalTokenUsage() int32 {
	if x != nil {
		return x.TotalTokenUsage
	}
	return 0
}

var File_gemini_proto protoreflect.FileDescriptor

const file_gemini_proto_rawDesc = "" +
	"\n" +
	"\fgemini.proto\x12\x06gemini\" \n" +
	"\n" +
	"TextPrompt\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\"\xf6\x01\n" +
	"\x13GenerateTextRequest\x12\x14\n" +
	"\x05model\x18\x01 \x01(\tR\x05model\x12*\n" +
	"\x06prompt\x18\x02 \x01(\v2\x12.gemini.TextPromptR\x06prompt\x12 \n" +
	"\vtemperature\x18\x03 \x01(\x02R\vtemperature\x12*\n" +
	"\x11max_output_tokens\x18\x04 \x01(\x05R\x0fmaxOutputTokens\x12\x13\n" +
	"\x05top_p\x18\x05 \x01(\x05R\x04topP\x12\x13\n" +
	"\x05top_k\x18\x06 \x01(\x05R\x04topK\x12%\n" +
	"\x0estop_sequences\x18\a \x01(\bR\rstopSequences\"H\n" +
	"\rTextCandidate\x12\x16\n" +
	"\x06output\x18\x01 \x01(\tR\x06output\x12\x1f\n" +
	"\vtoken_count\x18\x02 \x01(\x05R\n" +
	"tokenCount\"\xdd\x01\n" +
	"\x14GenerateTextResponse\x125\n" +
	"\n" +
	"candidates\x18\x01 \x03(\v2\x15.gemini.TextCandidateR\n" +
	"candidates\x12,\n" +
	"\x12prompt_token_usage\x18\x02 \x01(\x05R\x10promptTokenUsage\x124\n" +
	"\x16completion_token_usage\x18\x03 \x01(\x05R\x14completionTokenUsage\x12*\n" +
	"\x11total_token_usage\x18\x04 \x01(\x05R\x0ftotalTokenUsageB:Z8github.com/SpoungeAI/polykey-service/proto/google/geminib\x06proto3"

var (
	file_gemini_proto_rawDescOnce sync.Once
	file_gemini_proto_rawDescData []byte
)

func file_gemini_proto_rawDescGZIP() []byte {
	file_gemini_proto_rawDescOnce.Do(func() {
		file_gemini_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gemini_proto_rawDesc), len(file_gemini_proto_rawDesc)))
	})
	return file_gemini_proto_rawDescData
}

var file_gemini_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_gemini_proto_goTypes = []any{
	(*TextPrompt)(nil),           // 0: gemini.TextPrompt
	(*GenerateTextRequest)(nil),  // 1: gemini.GenerateTextRequest
	(*TextCandidate)(nil),        // 2: gemini.TextCandidate
	(*GenerateTextResponse)(nil), // 3: gemini.GenerateTextResponse
}
var file_gemini_proto_depIdxs = []int32{
	0, // 0: gemini.GenerateTextRequest.prompt:type_name -> gemini.TextPrompt
	2, // 1: gemini.GenerateTextResponse.candidates:type_name -> gemini.TextCandidate
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_gemini_proto_init() }
func file_gemini_proto_init() {
	if File_gemini_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gemini_proto_rawDesc), len(file_gemini_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gemini_proto_goTypes,
		DependencyIndexes: file_gemini_proto_depIdxs,
		MessageInfos:      file_gemini_proto_msgTypes,
	}.Build()
	File_gemini_proto = out.File
	file_gemini_proto_goTypes = nil
	file_gemini_proto_depIdxs = nil
}
