syntax = "proto3";

package polykey;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";


option go_package = "github.com/SpoungeAI/polykey-service/pkg/polykey";

// =================================
// Service Definition
// =================================

// PolyKey is the core service for the Spounge platform. It handles
// all specialized LLM logic and bot configuration management.
service PolyKey {
  // --- Core LLM Routing ---

  // Receives a chat prompt and streams back the LLM's response in real-time.
  rpc RouteChat (RouteChatRequest) returns (stream RouteChatResponse);

  // --- Bot Management (CRUD) ---

  // Creates a new bot configuration for the authenticated user.
  rpc CreateBot (CreateBotRequest) returns (Bot);

  // Retrieves a specific bot's configuration.
  rpc GetBot (GetBotRequest) returns (Bot);

  // Updates an existing bot's mutable configuration details.
  rpc UpdateBot (UpdateBotRequest) returns (Bot);

  // Deletes a bot and its associated data.
  rpc DeleteBot (DeleteBotRequest) returns (google.protobuf.Empty);

  // Lists all bots belonging to the authenticated user.
  rpc ListBots (ListBotsRequest) returns (stream Bot);

  // Securely sets or updates a bot's third-party API key.
  rpc SetBotAPIKey(SetBotAPIKeyRequest) returns (google.protobuf.Empty);
}

// =================================
// Core Message Types
// =================================

// Bot represents the complete configuration of a single chatbot.
// This message is used to transfer bot data between services and to the client.
message Bot {
  string id = 1;
  string user_id = 2;
  string name = 3;
  string system_prompt = 4;
  string model_provider = 5; // e.g., "openai", "groq"
  bool api_key_is_set = 6;  // Indicates if a key is stored, without exposing the key itself.
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
}

// =================================
// RPC Message Definitions
// =================================

// --- RouteChat ---
message RouteChatRequest {
  string bot_id = 1;
  string prompt = 2;
  // User-Service:
  // Note: user_id is handled at the API gateway level via JWT and passed securely. 
}

message RouteChatResponse {
  string response_chunk = 1;
}

// --- CreateBot ---
message CreateBotRequest {
  string name = 1;
  string system_prompt = 2;
  string model_provider = 3;
}

// --- GetBot & DeleteBot ---
message GetBotRequest {
  string bot_id = 1;
}

message DeleteBotRequest {
  string bot_id = 1;
}

// --- UpdateBot ---
message UpdateBotRequest {
  string bot_id = 1;
  string name = 2;
  string system_prompt = 3;
  string model_provider = 4;
}

// --- ListBots ---
message ListBotsRequest {
  // No fields are needed; the user is determined by the authentication token.
}

// --- SetBotAPIKey ---
message SetBotAPIKeyRequest {
  string bot_id = 1;
  string api_key = 2; // This field contains the sensitive key and must be handled securely.
}